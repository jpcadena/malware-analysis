"""
Main script for running the malware analysis project.
"""

import logging

import pandas as pd

from analysis.numerical.numerical_analysis import (
    analyze_categorical_relationships,
    analyze_dataframe,
    count_malware,
    insights_text,
    log_linear_analysis,
)
from analysis.visualization.visualization_analysis import figures, plot_count
from config.settings import settings
from core import logging_config
from engineering.pipeline import etl_process
from reports.report_generation import create_pdf_report
from schemas.data_type import DataType

logging_config.setup_logging(settings)
logger: logging.Logger = logging.getLogger(__name__)


def main() -> None:
    """
    :return: None
    :rtype: NoneType
    """
    logger.info("Running the malware analysis project")
    raw_path: DataType = DataType.RAW
    processed_path: DataType = DataType.PROCESSED
    malware_file = f"{raw_path.value}malware_hashes.csv"
    cve_file = f"{raw_path.value}vuln_data.csv"
    output_file = f"{processed_path.value}combined_data.csv"
    combined_df: pd.DataFrame = etl_process(malware_file, cve_file, output_file)
    logger.info("Pipeline executed for the data engineering process")
    analyze_dataframe(combined_df)
    malware_counts_df: pd.DataFrame = count_malware(combined_df)
    analyze_dataframe(malware_counts_df)
    non_signature_df: pd.DataFrame = combined_df.drop(
        ["signature"], axis="columns"
    )
    analyze_categorical_relationships(non_signature_df)
    log_linear_analysis(non_signature_df)
    plot_count(
        dataframe=non_signature_df,
        data_type=DataType.FIGURES,
    )
    create_pdf_report(figures, insights_text)


if __name__ == "__main__":
    main()
