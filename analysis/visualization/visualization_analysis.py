"""
A module for visualization analysis in the analysis-visualization package.
"""

import re
from typing import Any

import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt

from config.settings import settings
from schemas.data_type import DataType


def plot_count(
    dataframe: pd.DataFrame,
    data_type: DataType = DataType.FIGURES,
) -> None:
    """
    This method plots the counts of observations from the given variables
    :param dataframe: dataframe containing info
    :type dataframe: pd.DataFrame
    :param data_type: folder where data will be saved. Defaults to FIGURES
    :type data_type: DataType
    :return: None
    :rtype: NoneType
    """
    for column in dataframe.columns:
        plt.figure(figsize=settings.FIG_SIZE)
        sns.countplot(
            x=dataframe[column],
            hue=dataframe[column],
            palette=settings.PALETTE,
            legend=False,
        )
        label = re.sub(
            pattern=settings.RE_PATTERN, repl=settings.RE_REPL, string=column
        )
        plt.xlabel(label, fontsize=settings.FONT_SIZE)
        plt.ylabel("Count", fontsize=settings.FONT_SIZE)
        plt.title(f"Count Plot for {label}")
        plt.savefig(f"{data_type.value}count_{label}.png")
        plt.close()


def plot_distribution(
    series: pd.Series, color: str, data_type: DataType = DataType.FIGURES
) -> None:
    """
    This method plots the distribution of the given quantitative
     continuous variable
    :param series: Single column
    :type series: pd.Series
    :param color: color for the distribution
    :type color: str
    :param data_type: folder where data will be saved. Defaults to FIGURES
    :type data_type: DataType
    :return: None
    :rtype: NoneType
    """
    label: str = re.sub(
        pattern=settings.RE_PATTERN,
        repl=settings.RE_REPL,
        string=str(series.name),
    )
    sns.displot(x=series, kde=True, color=color, height=8, aspect=1.875)
    plt.title(f"Distribution Plot for {label}")
    plt.xlabel(label, fontsize=settings.FONT_SIZE)
    plt.ylabel("Frequency", fontsize=settings.FONT_SIZE)
    plt.savefig(f"{data_type.value}{str(series.name)}.png")
    plt.show()


def plot_scatter(
    dataframe: pd.DataFrame,
    x_array: str,
    y_array: str,
    hue: str,
    data_type: DataType = DataType.FIGURES,
) -> None:
    """
    This method plots the relationship between x and y for hue subset
    :param dataframe: dataframe containing the data
    :type dataframe: pd.DataFrame
    :param x_array: x-axis column name from dataframe
    :type x_array: str
    :param y_array: y-axis column name from dataframe
    :type y_array: str
    :param hue: grouping variable to filter plot
    :type hue: str
    :param data_type: folder where data will be saved. Defaults to FIGURES
    :type data_type: DataType
    :return: None
    :rtype: NoneType
    """
    plt.figure(figsize=settings.FIG_SIZE)
    sns.scatterplot(
        x=x_array, data=dataframe, y=y_array, hue=hue, palette=settings.PALETTE
    )
    label: str = re.sub(
        pattern=settings.RE_PATTERN, repl=settings.RE_REPL, string=y_array
    )
    plt.title(f"{x_array} Wise {label} Distribution")
    print(dataframe[[x_array, y_array]].corr())
    plt.savefig(f"{data_type.value}{x_array}_{y_array}_{hue}.png")
    plt.show()


def plot_heatmap(
    dataframe: pd.DataFrame, data_type: DataType = DataType.FIGURES
) -> None:
    """
    Plot heatmap to analyze correlation between features
    :param dataframe: dataframe containing the data
    :type dataframe: pd.DataFrame
    :param data_type: folder where data will be saved. Defaults to FIGURES
    :type data_type: DataType
    :return: None
    :rtype: NoneType
    """
    plt.figure(figsize=settings.FIG_SIZE)
    sns.heatmap(data=dataframe.corr(), annot=True, cmap="RdYlGn")
    plt.title(
        "Heatmap showing correlations among columns",
        fontsize=settings.FONT_SIZE,
    )
    plt.savefig(f"{data_type.value}correlations_heatmap.png")
    plt.show()


def plot_chi2_heatmap(  # type: ignore
    expected: np.ndarray[Any, np.dtype[np.float64]], data_type=DataType.FIGURES
) -> None:
    """
    Plots a heatmap for the expected frequencies from a chi-square test.
    :param expected: The array of expected frequencies
    :type expected: np.ndarray[Any, np.dtype[np.float64]]
    :param data_type: The type of data, affects the saving directory of the
     figure
    :type data_type: DataType
    :return: None
    :rtype: NoneType
    """
    plt.figure(figsize=settings.FIG_SIZE)
    sns.heatmap(data=expected, annot=True, cmap="RdYlGn")
    plt.title("Heatmap of Expected Frequencies", fontsize=settings.FONT_SIZE)
    plt.savefig(f"{data_type.value}chi2_heatmap.png")
    plt.show()


figures: list[str] = [
    "chi2_heatmap.png",
    "count_en_id.png",
    "count_cvss_access_complexity.png",
    "count_cvss_access_vector.png",
    "count_cvss_authentication.png",
    "count_cvss_availability_impact.png",
    "count_cvss_integrity_impact.png",
]
