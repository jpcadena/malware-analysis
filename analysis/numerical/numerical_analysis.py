"""
A module for numerical analysis in the analysis-numerical package.
"""

import pandas as pd
from pydantic import NonNegativeInt


def analyze_dataframe(dataframe: pd.DataFrame) -> None:
    """
    Analyze the dataframe and its columns with inference statistics
    :param dataframe: DataFrame to analyze
    :type dataframe: pd.DataFrame
    :return: None
    :rtype: NoneType
    """
    print(dataframe.head())
    print(dataframe.sample(5))
    print(dataframe.shape)
    print(dataframe.dtypes)
    dataframe.info(memory_usage="deep")
    print(dataframe.memory_usage(deep=True))
    print(dataframe.describe(include="all"))
    correlation_matrix: pd.DataFrame = dataframe.corr()
    print("Correlation Matrix:\n", correlation_matrix)

    missing_values: NonNegativeInt = dataframe.isnull().sum()
    percent_missing: float = (missing_values / dataframe.shape[0]) * 100
    print(
        pd.DataFrame(
            {'Missing Values': missing_values, 'Percent': percent_missing}
        )
    )

    for column in dataframe.columns:
        print(dataframe[column].value_counts())
        print(dataframe[column].unique())
        print(dataframe[column].value_counts(normalize=True) * 100)


def count_malware(dataframe: pd.DataFrame, pattern: str) -> pd.DataFrame:
    """
    Count unique malware occurrences for each CVE ID.
    :param dataframe: The transformed dataframe with malware occurrences
    :type dataframe: pd.DataFrame
    :param pattern: The pattern to use for regex
    :type pattern: str
    :return: The number of malware occurrences for each malware ID in the data
    :rtype: pd.DataFrame
    """
    all_cve_ids: pd.DataFrame = (
        dataframe['SIGNATURE'].str.extractall(pattern)[0].reset_index()
    )
    all_cve_ids.columns = ['index', 'CVE_ID']
    merged: pd.DataFrame = all_cve_ids.merge(
        dataframe, left_on='index', right_index=True
    )
    malware_count: pd.DataFrame = (
        merged.groupby('CVE_ID')['MD5'].nunique().reset_index()
    )
    malware_count.columns = ['CVE_ID', 'malware_count']
    return malware_count.sort_values(by='malware_count', ascending=False)
