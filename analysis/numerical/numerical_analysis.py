"""
A module for numerical analysis in the analysis-numerical package.
"""

import itertools
import logging

import numpy as np
import pandas as pd
from pydantic import NonNegativeInt
from scipy.stats import chi2_contingency

from analysis.visualization.visualization_analysis import plot_chi2_heatmap

logger: logging.Logger = logging.getLogger(__name__)


def analyze_dataframe(dataframe: pd.DataFrame) -> None:
    """
    Analyze the dataframe and its columns with inference statistics
    :param dataframe: DataFrame to analyze
    :type dataframe: pd.DataFrame
    :return: None
    :rtype: NoneType
    """
    print(dataframe.head())
    print(dataframe.shape)
    print(dataframe.dtypes)
    dataframe.info(memory_usage="deep")
    print(dataframe.memory_usage(deep=True))
    print(dataframe.describe(include="all"))

    missing_values: NonNegativeInt = dataframe.isnull().sum()
    percent_missing: float = (missing_values / dataframe.shape[0]) * 100
    print(
        pd.DataFrame(
            {'Missing Values': missing_values, 'Percent': percent_missing}
        )
    )

    for column in dataframe.columns:
        print(dataframe[column].value_counts())
        print(dataframe[column].unique())
        print(dataframe[column].value_counts(normalize=True) * 100)


def count_malware(dataframe: pd.DataFrame) -> pd.DataFrame:
    """
    Count unique malware occurrences for each CVE ID.
    :param dataframe: The transformed dataframe with malware occurrences
    :type dataframe: pd.DataFrame
    :return: The number of malware occurrences for each malware ID in the data
    :rtype: pd.DataFrame
    """
    malware_count = dataframe.groupby('cveid')['md5'].nunique().reset_index()
    malware_count.columns = ['cveid', 'malware_count']
    return malware_count.sort_values(by='malware_count', ascending=False)


def cramers_v(confusion_matrix: pd.DataFrame) -> float:
    """
    Calculate Cramér's V statistic for a given confusion matrix.
    :param confusion_matrix: Confusion matrix from a chi-squared test.
    :type confusion_matrix: pd.DataFrame
    :return: Cramér's V statistic.
    :rtype: float
    """
    chi2: float = chi2_contingency(confusion_matrix)[0]
    n: int = confusion_matrix.sum().sum()
    phi2: float = chi2 / n
    r, k = confusion_matrix.shape
    phi2corr: float = max(0, int(phi2 - ((k - 1) * (r - 1)) / (n - 1)))
    rcorr: float = r - ((r - 1) ** 2) / (n - 1)
    kcorr: float = k - ((k - 1) ** 2) / (n - 1)
    return float(np.sqrt(phi2corr / min((kcorr - 1), (rcorr - 1))))


def analyze_categorical_relationships(dataframe: pd.DataFrame) -> None:
    """
    Analyze the relationships between all pairs of categorical variables in
     the dataframe.
    :param dataframe: A dataframe with categorical variables to analyze.
    :type dataframe: pd.DataFrame
    :return: None
    :rtype: NoneType
    """
    categorical_columns = dataframe.select_dtypes(
        include=['object', 'category']
    ).columns
    for col1, col2 in itertools.combinations(categorical_columns, 2):
        cross_tab = pd.crosstab(dataframe[col1], dataframe[col2])
        print(f'Cross Tabulation between {col1} and {col2}:\n{cross_tab}\n')
        cramer_v_value = cramers_v(cross_tab)
        if cramer_v_value >= 0.7:
            logger.info(
                f"Cramér's V between {col1} and {col2}: {cramer_v_value:.4f}\n"
            )


def log_linear_analysis(dataframe: pd.DataFrame) -> None:
    """
    Perform log-linear analysis on a contingency table created from the given
     dataframe.
    :param dataframe: A dataframe containing the variables to create a
     contingency table for analysis.
    :type dataframe: pd.DataFrame
    :return: None
    :rtype: NoneType
    """
    contingency_table: pd.DataFrame = pd.crosstab(
        index=[
            dataframe['cvss_access_vector'],
            dataframe['cvss_access_complexity'],
        ],
        columns=dataframe['cvss_authentication'],
        margins=True,
    )
    chi2, p, dof, expected = chi2_contingency(contingency_table)
    print("Chi-square statistic:", chi2)
    print("P-value:", p)
    print("Degrees of freedom:", dof)
    print("Expected:", expected)
    print(type(expected))
    plot_chi2_heatmap(expected)


insights_text: list[str] = [
    """
    After an extensive examination of the vuln_data.csv dataset, it has become
     apparent that certain Common Vulnerability Scoring System (CVSS) factors
      demonstrate a more pronounced correlation with malware occurrences than
       others. Interestingly, despite conventional wisdom suggesting that
        access vector, authentication, and access complexity are pivotal in
         determining a vulnerability's exploitability, our analysis suggests a
          more nuanced reality
    """,
    """
    From the count plots generated for different CVSS factors, it is clear that
     the majority of vulnerabilities have a network-related access vector (N),
      suggesting that remotely exploitable vulnerabilities are more common.
       This aligns with expectations, as remote access would naturally increase
        the potential for malware exploitation
    """,
    """
    However, the complexity of access does not show a definitive trend
     correlating with malware occurrences. The distribution across low (L),
      medium (M), and high (H) access complexity is relatively balanced, with a
       slight predominance of the medium complexity. This is somewhat
        surprising as it may imply that the difficulty of exploiting a
         vulnerability does not significantly deter attackers, contrary to what
          might be expected.
    """,
    """
    As for authentication (M for multiple, N for none), the vast majority of
     vulnerabilities require no authentication to exploit. This finding is in
      line with the assumption that vulnerabilities that are easier to exploit
       (i.e., requiring no authentication) would be more commonly leveraged in
        malware attacks.
    """,
    """
    The chi-square tests and Cramér's V statistics further reveal that while
     there is an association between some CVSS factors and malware presence,
      the strength of this association varies. Notably, the Cramér's V values
       for certain pairs of variables indicate a moderate association, such as
        between confidentiality impact and availability impact, as well as
         confidentiality impact and integrity impact, both scoring a Cramér's V
          of 0.7075. These findings suggest that vulnerabilities with a higher
           impact on confidentiality, integrity, or availability are more
            likely to be associated with malware.
    """,
    """
    In conclusion, while some CVSS factors such as the need for authentication
     and the impact on confidentiality, integrity, or availability do appear
      related to malware prevalence, the complexity of access does not show a
       strong correlation. This analysis challenges some aspects of
        conventional wisdom and highlights the multifaceted nature of
         cybersecurity threats. It is crucial for cybersecurity professionals
          to consider a broader range of factors when assessing the risk and
           potential for exploitation of vulnerabilities.
    """,
]
