"""
A module for cve score in the schemas package.
"""

from pydantic import BaseModel, Field, field_validator

from config.settings import settings
from utils.utils import cve_id_validator


class CVEScore(BaseModel):
    """
    CVE Score schema that inherits from Pydantic BaseModel
    """

    cveid: str = Field(
        ...,
        title="CVE ID",
        description="The CVE identification number",
        min_length=13,
        max_length=13,
    )
    cvss_access_vector: str = Field(
        ...,
        title="CVSS Access Vector",
        description="Access vector category",
        min_length=1,
        max_length=1,
    )
    cvss_access_complexity: str = Field(
        ...,
        title="CVSS Access Complexity",
        description="Access complexity category",
        min_length=1,
        max_length=1,
    )
    cvss_authentication: str = Field(
        ...,
        title="CVSS Authentication",
        description="Authentication requirement to exploit the vulnerability",
        min_length=1,
        max_length=1,
    )
    cvss_confidentiality_impact: str = Field(
        ...,
        title="CVSS Confidentiality Impact",
        description="Impact of the exploit on data confidentiality",
        min_length=1,
        max_length=1,
    )
    cvss_availability_impact: str = Field(
        ...,
        title="CVSS Availability Impact",
        description="Impact of the exploit on data availability",
        min_length=1,
        max_length=1,
    )
    cvss_integrity_impact: str = Field(
        ...,
        title="CVSS Integrity Impact",
        description="Impact of the exploit on data integrity",
        min_length=1,
        max_length=1,
    )

    @field_validator("cveid", mode="before")
    def validate_cveid(cls, v: str) -> str:
        """
        Validates the CVE ID format and year
        :param v: The CVE ID to validate
        :type v: str
        :return: The validated CVE ID
        :rtype: str
        """
        return cve_id_validator(
            v,
            settings.CVE_SIGNATURE_PATTERN,
            settings.FIRST_CVE_YEAR,
            settings.CVE_ID_FORMAT,
            True,
        )

    @field_validator(
        "cvss_access_vector",
        "cvss_access_complexity",
        "cvss_authentication",
        "cvss_confidentiality_impact",
        "cvss_availability_impact",
        "cvss_integrity_impact",
        mode="before",
        check_fields=True,
    )
    def validate_attributes(cls, v: str) -> str:
        """
        Validates the CVSS category fields
        :param v: The CVSS category to validate
        :type v: str
        :return: The validated CVSS category
        :rtype: str
        """
        if v in {'N', 'L', 'A', 'C', 'P', 'M', 'S', 'H'}:
            return v
        raise ValueError("Invalid CVSS category value")
