"""
A module for malware hash in the schemas package.
"""

import re

from pydantic import BaseModel, Field, field_validator

from config.settings import settings
from utils.utils import cve_id_validator


class MalwareHash(BaseModel):
    """
    Malware Hash schema that inherits from Pydantic BaseModel
    """

    md5: str = Field(
        ...,
        title="MD5 Hash",
        description="Unique MD5 hash for the malware",
        min_length=32,
        max_length=32,
    )
    signature: str = Field(
        ...,
        title="Signature",
        description="Signature assigned to the malware",
        min_length=13,
    )
    en_id: str = Field(
        ...,
        title="Antivirus Software ID",
        description="ID of the antivirus software",
        min_length=4,
        max_length=4,
    )

    @field_validator('md5', mode="before")
    def validate_md5(cls, v: str) -> str:
        """
        Validates the MD5 hash (Unique identifier of the malware)
        :param v: The MD5 hash to validate
        :type v: str
        :return: The validated MD5 hash
        :rtype: str
        """
        if not re.match(settings.MD5_PATTERN, v):
            raise ValueError("MD5 must be a 32-character hexadecimal string")
        return v

    @field_validator('signature', mode="before")
    def validate_signature(cls, v: str) -> str:
        """
        Validates the signature assigned to a piece of malware by the antivirus
        :param v: The signature to validate
        :type v: str
        :return: The validated signature
        :rtype: str
        """
        return cve_id_validator(
            v,
            settings.CVE_ID_PATTERN,
            settings.FIRST_CVE_YEAR,
            settings.CVE_ID_FORMAT,
        )

    @field_validator('en_id', mode="before")
    def validate_en_id(cls, v: str) -> str:
        """
        Validates the ID of the antivirus software
        :param v: The antivirus ID to validate
        :type v: str
        :return: The validated ID
        :rtype: str
        """
        if not re.match(settings.EN_ID_PATTERN, v):
            raise ValueError("EN_ID must be a 4-character alphanumeric string")
        return v
