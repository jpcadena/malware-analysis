"""
A module for utils in the utils package.
"""

import re
from datetime import datetime
from typing import Optional

from pydantic import PositiveInt


def cve_id_validator(
    cve_id: str,
    pattern: str,
    first_year: PositiveInt,
    _format: str,
    full_match: bool = False,
) -> str:
    """
    Check if the given string is a valid CVE identifier or contains one.
    :param cve_id: The string to validate
    :type cve_id: str
    :param pattern: The regex pattern to identify CVE ID within the string
    :type pattern: str
    :param first_year: The first year of CVE ID issuance
    :type first_year: PositiveInt
    :param _format: The CVE ID format string for error messages
    :type _format: str
    :param full_match: Whether to match the entire string or search within it
    :type full_match: bool
    :return: The validated identifier
    :rtype: str
    """
    match: Optional[re.Match[str]]
    if full_match:
        match = re.fullmatch(pattern, cve_id)
    else:
        match = re.search(pattern, cve_id)
    if not match:
        error_message = f"Must be a valid CVE ID in the format {_format}"
        if not full_match:
            error_message = (
                f"Must contain a valid CVE ID in the format {_format}"
            )
        raise ValueError(error_message)
    year: int = int(match[1])
    current_year: PositiveInt = datetime.now().year
    if not first_year <= year <= current_year:
        raise ValueError(
            f"CVE ID year must be between {first_year} and {current_year}"
        )
    return cve_id


def extract_cve_ids(signature: str, pattern: str) -> list[str]:
    """
    Extract CVE IDs from a signature string.
    :param signature: The signature to analyze
    :type signature: str
    :param pattern: The pattern to use for regex
    :type pattern: str
    :return: The CVE IDS found in the signature
    :rtype: list[str]
    """
    return re.findall(pattern, signature)
