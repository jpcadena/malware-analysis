"""
A module for transformation in the engineering-transformation package.
"""

from typing import Any, Type

import pandas as pd
from pydantic import BaseModel

from config.settings import settings
from core.decorators import benchmark
from utils.utils import extract_cve_ids


def clean_data(dataframe: pd.DataFrame) -> pd.DataFrame:
    """
    Clean the DataFrame by trimming whitespace from string columns.
    :param dataframe: DataFrame to clean.
    :type dataframe: pd.DataFrame
    :return: Cleaned DataFrame.
    :rtype: pd.DataFrame
    """
    str_cols = dataframe.select_dtypes(["object", "string"]).columns
    dataframe[str_cols] = dataframe[str_cols].apply(lambda x: x.str.strip())
    dataframe.columns = [col.lower() for col in dataframe.columns]
    return dataframe


@benchmark
def validate_data(
    dataframe: pd.DataFrame, schema: Type[BaseModel]
) -> pd.DataFrame:
    """Validate and transform data using a given Pydantic schema.
    :param dataframe: DataFrame to validate and transform.
    :type dataframe: pd.DataFrame
    :param schema: Pydantic schema to use for validation.
    :return: Validated and transformed DataFrame.
    :rtype: pd.DataFrame
    """
    validated_data: list[dict[str, Any]] = [
        schema(**record).model_dump()
        for record in dataframe.to_dict(orient="records")
    ]
    return pd.DataFrame(validated_data)


@benchmark
def transform_data(dataframe: pd.DataFrame) -> pd.DataFrame:
    """
    Transform the DataFrame by extracting CVE ID from the SIGNATURE column.
    :param dataframe: DataFrame with MD5, SIGNATURE, and EN_ID columns.
    :type dataframe: pd.DataFrame
    :return: Transformed DataFrame with MD5, CVE_ID, and EN_ID columns.
    :rtype: pd.DataFrame
    """

    def get_first_cve_id(signature: str) -> str:
        """
        Get the first occurrence of the MD5 signature
        :param signature: The MD5 signature
        :type signature: str
        :return: The first occurrence found in the CVE IDs
        :rtype: str
        """
        cve_ids: list[str] = extract_cve_ids(signature, settings.CVE_ID_PATTERN)
        return cve_ids[0]

    dataframe["cveid"] = dataframe["signature"].apply(get_first_cve_id)
    return dataframe


def merge_datasets(
    df1: pd.DataFrame, df2: pd.DataFrame, on: str
) -> pd.DataFrame:
    """Merge two DataFrames on a given key.
    :param df1: First DataFrame.
    :type df1: pd.DataFrame
    :param df2: Second DataFrame.
    :type df2: pd.DataFrame
    :param on: Column name to merge on.
    :type on: str
    :return: Merged DataFrame.
    :rtype: pd.DataFrame
    """
    return pd.merge(df1, df2, on=on)
